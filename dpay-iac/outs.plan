Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # module.autoscaling.aws_autoscaling_group.asg will be created
  + resource "aws_autoscaling_group" "asg" {
      + arn                              = (known after apply)
      + availability_zones               = (known after apply)
      + default_cooldown                 = (known after apply)
      + desired_capacity                 = 2
      + force_delete                     = false
      + force_delete_warm_pool           = false
      + health_check_grace_period        = 300
      + health_check_type                = "EC2"
      + id                               = (known after apply)
      + ignore_failed_scaling_activities = false
      + load_balancers                   = (known after apply)
      + max_size                         = 5
      + metrics_granularity              = "1Minute"
      + min_size                         = 2
      + name                             = "asg-app"
      + name_prefix                      = (known after apply)
      + predicted_capacity               = (known after apply)
      + protect_from_scale_in            = false
      + service_linked_role_arn          = (known after apply)
      + target_group_arns                = (known after apply)
      + vpc_zone_identifier              = (known after apply)
      + wait_for_capacity_timeout        = "10m"
      + warm_pool_size                   = (known after apply)

      + launch_template {
          + id      = (known after apply)
          + name    = (known after apply)
          + version = "$Latest"
        }

      + tag {
          + key                 = "Name"
          + propagate_at_launch = true
          + value               = "asg-instance"
        }
    }

  # module.autoscaling.aws_autoscaling_policy.cpu_scale_out will be created
  + resource "aws_autoscaling_policy" "cpu_scale_out" {
      + adjustment_type           = "ChangeInCapacity"
      + arn                       = (known after apply)
      + autoscaling_group_name    = "asg-app"
      + cooldown                  = 300
      + enabled                   = true
      + estimated_instance_warmup = 300
      + id                        = (known after apply)
      + metric_aggregation_type   = "Average"
      + name                      = "scale-out-on-high-cpu"
      + policy_type               = "SimpleScaling"
      + scaling_adjustment        = 1

      + target_tracking_configuration {
          + disable_scale_in = false
          + target_value     = 45

          + predefined_metric_specification {
              + predefined_metric_type = "ASGAverageCPUUtilization"
            }
        }
    }

  # module.autoscaling.aws_iam_instance_profile.ec2_profile will be created
  + resource "aws_iam_instance_profile" "ec2_profile" {
      + arn         = (known after apply)
      + create_date = (known after apply)
      + id          = (known after apply)
      + name        = "ec2-autoscaling-profile"
      + name_prefix = (known after apply)
      + path        = "/"
      + role        = "ec2-autoscaling-role"
      + tags_all    = (known after apply)
      + unique_id   = (known after apply)
    }

  # module.autoscaling.aws_iam_role.ec2_role will be created
  + resource "aws_iam_role" "ec2_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ec2.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "ec2-autoscaling-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)
    }

  # module.autoscaling.aws_iam_role_policy_attachment.cw_attach will be created
  + resource "aws_iam_role_policy_attachment" "cw_attach" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
      + role       = "ec2-autoscaling-role"
    }

  # module.autoscaling.aws_launch_template.lt will be created
  + resource "aws_launch_template" "lt" {
      + arn                    = (known after apply)
      + default_version        = (known after apply)
      + id                     = (known after apply)
      + image_id               = "ami-026c39f4021df9abe"
      + instance_type          = "t2.medium"
      + key_name               = "privates"
      + latest_version         = (known after apply)
      + name                   = (known after apply)
      + name_prefix            = "asg-template"
      + tags_all               = (known after apply)
      + user_data              = "IyEvYmluL2Jhc2gNCnNldCAtZQ0KDQojIFVwZGF0ZSBhbmQgaW5zdGFsbCBuZWNlc3NhcnkgcGFja2FnZXMNCmFwdCB1cGRhdGUgLXkNCmFwdCBpbnN0YWxsIC15IGFtYXpvbi1jbG91ZHdhdGNoLWFnZW50IGRvY2tlci5pbw0KDQojIENyZWF0ZSBhIHVzZXIgd2l0aCBzdWRvIHByaXZpbGVnZXMNCnVzZXJhZGQgLW0gLXMgL2Jpbi9iYXNoIHNheWFkbWlucw0KdXNlcm1vZCAtYUcgc3VkbyBzYXlhZG1pbnMNCnVzZXJtb2QgLWFHIGRvY2tlciBzYXlhZG1pbnMNCg0KIyBTZXQgdXAgU1NIIGFjY2VzcyBmb3IgdGhlIG5ldyB1c2VyDQpta2RpciAtcCAvaG9tZS9zYXlhZG1pbnMvLnNzaA0KZWNobyAic3NoLWVkMjU1MTkgQUFBQUMzTnphQzFsWkRJMU5URTVBQUFBSUp6ZER2M3c0cVZIdWdSbS9DLytQVkg3NWlOOEFZcGd0anZyY0JPWXBHQjkgc2F5YWRtaW5zIiA+IC9ob21lL3NheWFkbWlucy8uc3NoL2F1dGhvcml6ZWRfa2V5cw0KY2htb2QgNzAwIC9ob21lL3NheWFkbWlucy8uc3NoDQpjaG1vZCA2MDAgL2hvbWUvc2F5YWRtaW5zLy5zc2gvYXV0aG9yaXplZF9rZXlzDQpjaG93biAtUiBzYXlhZG1pbnM6c2F5YWRtaW5zIC9ob21lL3NheWFkbWlucy8uc3NoDQoNCiMgRW5hYmxlIGFuZCBzdGFydCBEb2NrZXINCnN5c3RlbWN0bCBlbmFibGUgZG9ja2VyDQpzeXN0ZW1jdGwgc3RhcnQgZG9ja2VyDQoNCiMgQ29uZmlndXJlIENsb3VkV2F0Y2ggYWdlbnQNCmNhdCA8PEVPVCA+IC9vcHQvYXdzL2FtYXpvbi1jbG91ZHdhdGNoLWFnZW50L2V0Yy9hbWF6b24tY2xvdWR3YXRjaC1hZ2VudC5qc29uDQp7DQogICJtZXRyaWNzIjogew0KICAgICJtZXRyaWNzX2NvbGxlY3RlZCI6IHsNCiAgICAgICJtZW0iOiB7DQogICAgICAgICJtZWFzdXJlbWVudCI6IFsibWVtX3VzZWRfcGVyY2VudCJdLA0KICAgICAgICAibWV0cmljc19jb2xsZWN0aW9uX2ludGVydmFsIjogNjANCiAgICAgIH0sDQogICAgICAiY3B1Ijogew0KICAgICAgICAibWVhc3VyZW1lbnQiOiBbImNwdV91c2FnZV9pZGxlIiwgImNwdV91c2FnZV91c2VyIiwgImNwdV91c2FnZV9zeXN0ZW0iXSwNCiAgICAgICAgIm1ldHJpY3NfY29sbGVjdGlvbl9pbnRlcnZhbCI6IDYwDQogICAgICB9DQogICAgfSwNCiAgICAiYXBwZW5kX2RpbWVuc2lvbnMiOiB7DQogICAgICAiSW5zdGFuY2VJZCI6ICIke2F3czpJbnN0YW5jZUlkfSINCiAgICB9DQogIH0NCn0NCkVPVA0KDQovb3B0L2F3cy9hbWF6b24tY2xvdWR3YXRjaC1hZ2VudC9iaW4vYW1hem9uLWNsb3Vkd2F0Y2gtYWdlbnQtY3RsIFwNCiAgLWEgZmV0Y2gtY29uZmlnIC1tIGVjMiAtYyBmaWxlOi9vcHQvYXdzL2FtYXpvbi1jbG91ZHdhdGNoLWFnZW50L2V0Yy9hbWF6b24tY2xvdWR3YXRjaC1hZ2VudC5qc29uIC1zDQo="
      + vpc_security_group_ids = (known after apply)

      + iam_instance_profile {
          + name = "ec2-autoscaling-profile"
        }

      + monitoring {
          + enabled = true
        }

      + tag_specifications {
          + resource_type = "instance"
          + tags          = {
              + "Name" = "autoscaling-instance"
            }
        }
    }

  # module.cloudwatch.aws_cloudwatch_metric_alarm.cpu_high will be created
  + resource "aws_cloudwatch_metric_alarm" "cpu_high" {
      + actions_enabled                       = true
      + alarm_description                     = "High CPU detected"
      + alarm_name                            = "asg-high-cpu"
      + arn                                   = (known after apply)
      + comparison_operator                   = "GreaterThanThreshold"
      + dimensions                            = {
          + "AutoScalingGroupName" = "asg-app"
        }
      + evaluate_low_sample_count_percentiles = (known after apply)
      + evaluation_periods                    = 2
      + id                                    = (known after apply)
      + metric_name                           = "CPUUtilization"
      + namespace                             = "AWS/EC2"
      + period                                = 60
      + statistic                             = "Average"
      + tags_all                              = (known after apply)
      + threshold                             = 70
      + treat_missing_data                    = "missing"
    }

  # module.cloudwatch.aws_cloudwatch_metric_alarm.memory_high will be created
  + resource "aws_cloudwatch_metric_alarm" "memory_high" {
      + actions_enabled                       = true
      + alarm_description                     = "High memory usage detected"
      + alarm_name                            = "asg-high-mem"
      + arn                                   = (known after apply)
      + comparison_operator                   = "GreaterThanThreshold"
      + dimensions                            = {
          + "AutoScalingGroupName" = "asg-app"
        }
      + evaluate_low_sample_count_percentiles = (known after apply)
      + evaluation_periods                    = 2
      + id                                    = (known after apply)
      + metric_name                           = "mem_used_percent"
      + namespace                             = "CWAgent"
      + period                                = 60
      + statistic                             = "Average"
      + tags_all                              = (known after apply)
      + threshold                             = 80
      + treat_missing_data                    = "missing"
    }

  # module.cloudwatch.aws_cloudwatch_metric_alarm.network_in will be created
  + resource "aws_cloudwatch_metric_alarm" "network_in" {
      + actions_enabled                       = true
      + alarm_description                     = "High network in traffic"
      + alarm_name                            = "asg-high-network-in"
      + arn                                   = (known after apply)
      + comparison_operator                   = "GreaterThanThreshold"
      + dimensions                            = {
          + "AutoScalingGroupName" = "asg-app"
        }
      + evaluate_low_sample_count_percentiles = (known after apply)
      + evaluation_periods                    = 2
      + id                                    = (known after apply)
      + metric_name                           = "NetworkIn"
      + namespace                             = "AWS/EC2"
      + period                                = 60
      + statistic                             = "Average"
      + tags_all                              = (known after apply)
      + threshold                             = 10000000
      + treat_missing_data                    = "missing"
    }

  # module.cloudwatch.aws_cloudwatch_metric_alarm.network_out will be created
  + resource "aws_cloudwatch_metric_alarm" "network_out" {
      + actions_enabled                       = true
      + alarm_description                     = "High network out traffic"
      + alarm_name                            = "asg-high-network-out"
      + arn                                   = (known after apply)
      + comparison_operator                   = "GreaterThanThreshold"
      + dimensions                            = {
          + "AutoScalingGroupName" = "asg-app"
        }
      + evaluate_low_sample_count_percentiles = (known after apply)
      + evaluation_periods                    = 2
      + id                                    = (known after apply)
      + metric_name                           = "NetworkOut"
      + namespace                             = "AWS/EC2"
      + period                                = 60
      + statistic                             = "Average"
      + tags_all                              = (known after apply)
      + threshold                             = 10000000
      + treat_missing_data                    = "missing"
    }

  # module.cloudwatch.aws_cloudwatch_metric_alarm.status_check_failed will be created
  + resource "aws_cloudwatch_metric_alarm" "status_check_failed" {
      + actions_enabled                       = true
      + alarm_description                     = "Instance status check failed"
      + alarm_name                            = "asg-status-check-failed"
      + arn                                   = (known after apply)
      + comparison_operator                   = "GreaterThanThreshold"
      + dimensions                            = {
          + "AutoScalingGroupName" = "asg-app"
        }
      + evaluate_low_sample_count_percentiles = (known after apply)
      + evaluation_periods                    = 1
      + id                                    = (known after apply)
      + metric_name                           = "StatusCheckFailed"
      + namespace                             = "AWS/EC2"
      + period                                = 60
      + statistic                             = "Maximum"
      + tags_all                              = (known after apply)
      + threshold                             = 0
      + treat_missing_data                    = "missing"
    }

  # module.nat_gateway.aws_eip.nat will be created
  + resource "aws_eip" "nat" {
      + allocation_id        = (known after apply)
      + arn                  = (known after apply)
      + association_id       = (known after apply)
      + carrier_ip           = (known after apply)
      + customer_owned_ip    = (known after apply)
      + domain               = "vpc"
      + id                   = (known after apply)
      + instance             = (known after apply)
      + ipam_pool_id         = (known after apply)
      + network_border_group = (known after apply)
      + network_interface    = (known after apply)
      + private_dns          = (known after apply)
      + private_ip           = (known after apply)
      + ptr_record           = (known after apply)
      + public_dns           = (known after apply)
      + public_ip            = (known after apply)
      + public_ipv4_pool     = (known after apply)
      + tags                 = {
          + "Name" = "nat-eip"
        }
      + tags_all             = {
          + "Name" = "nat-eip"
        }
      + vpc                  = (known after apply)
    }

  # module.nat_gateway.aws_nat_gateway.nat will be created
  + resource "aws_nat_gateway" "nat" {
      + allocation_id                      = (known after apply)
      + association_id                     = (known after apply)
      + connectivity_type                  = "public"
      + id                                 = (known after apply)
      + network_interface_id               = (known after apply)
      + private_ip                         = (known after apply)
      + public_ip                          = (known after apply)
      + secondary_private_ip_address_count = (known after apply)
      + secondary_private_ip_addresses     = (known after apply)
      + subnet_id                          = (known after apply)
      + tags                               = {
          + "Name" = "main-nat-gateway"
        }
      + tags_all                           = {
          + "Name" = "main-nat-gateway"
        }
    }

  # module.nat_gateway.aws_route.private_nat_route will be created
  + resource "aws_route" "private_nat_route" {
      + destination_cidr_block = "0.0.0.0/0"
      + id                     = (known after apply)
      + instance_id            = (known after apply)
      + instance_owner_id      = (known after apply)
      + nat_gateway_id         = (known after apply)
      + network_interface_id   = (known after apply)
      + origin                 = (known after apply)
      + route_table_id         = (known after apply)
      + state                  = (known after apply)
    }

  # module.security_group.aws_security_group.asg_sg will be created
  + resource "aws_security_group" "asg_sg" {
      + arn                    = (known after apply)
      + description            = "Security group for ASG EC2 instances"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "180.244.46.188/32",
                ]
              + description      = "Allow SSH from trusted IP"
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
        ]
      + name                   = "asg-asg-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "asg-asg-sg"
        }
      + tags_all               = {
          + "Name" = "asg-asg-sg"
        }
      + vpc_id                 = (known after apply)
    }

  # module.vpc.aws_internet_gateway.igw will be created
  + resource "aws_internet_gateway" "igw" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags_all = (known after apply)
      + vpc_id   = (known after apply)
    }

  # module.vpc.aws_route_table.private will be created
  + resource "aws_route_table" "private" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = (known after apply)
      + tags_all         = (known after apply)
      + vpc_id           = (known after apply)
    }

  # module.vpc.aws_route_table.public will be created
  + resource "aws_route_table" "public" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                 = "0.0.0.0/0"
              + gateway_id                 = (known after apply)
                # (11 unchanged attributes hidden)
            },
        ]
      + tags_all         = (known after apply)
      + vpc_id           = (known after apply)
    }

  # module.vpc.aws_route_table_association.private will be created
  + resource "aws_route_table_association" "private" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.public will be created
  + resource "aws_route_table_association" "public" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_subnet.private will be created
  + resource "aws_subnet" "private" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "ap-southeast-3a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.2.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "private-subnet"
        }
      + tags_all                                       = {
          + "Name" = "private-subnet"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_subnet.public will be created
  + resource "aws_subnet" "public" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "ap-southeast-3a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "public-subnet"
        }
      + tags_all                                       = {
          + "Name" = "public-subnet"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_vpc.main will be created
  + resource "aws_vpc" "main" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.0.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = true
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Name" = "main-vpc"
        }
      + tags_all                             = {
          + "Name" = "main-vpc"
        }
    }

Plan: 23 to add, 0 to change, 0 to destroy.